/*
 * Please see the included README.md file for license terms and conditions.
 */


// This file is a suggested starting place for your code.
// It is completely optional and not required.
// Note the reference that includes it in the index.html file.


/*jslint browser:true, devel:true, white:true, vars:true */
/*global $:false, intel:false app:false, dev:false, cordova:false */


// For improved debugging and maintenance of your app, it is highly
// recommended that you separate your JavaScript from your HTML files.
// Use the addEventListener() method to associate events with DOM elements.

// For example:

// var el ;
// el = document.getElementById("id_myButton") ;
// el.addEventListener("click", myEventHandler, false) ;



// The function below is an example of the best way to "start" your app.
// This example is calling the standard Cordova "hide splashscreen" function.
// You can add other code to it or add additional functions that are triggered
// by the same event or other events.

function log(message: any) {
    const div = document.createElement("div");
    div.appendChild(document.createTextNode(message));
    document.body.appendChild(div);
    if(console) {
        console.log(message);
    }
}

function onAppReady() {
    if( navigator.splashscreen && navigator.splashscreen.hide ) {   // Cordova API detected
        navigator.splashscreen.hide() ;
    }
    
    log("test1");

        log('File plugin is ready');

        log(cordova.file.applicationDirectory);
        log(cordova.file);
     
        const entry = window.resolveLocalFileSystemURL("filesystem:" + cordova.file.applicationDirectory, applicationDirectoryResolved, fail);
  
}

function applicationDirectoryResolved(entry: DirectoryEntry) {
    log(entry.fullPath);

    // Get a directory reader
    const directoryReader = entry.createReader();

    // Get a list of all the entries in the directory
    directoryReader.readEntries(success, fail);
}
//
function success(entries: Array<DirectoryEntry>) {
    for (let i=0; i < entries.length; i++) {
        log(entries[i].name);
    }
}

function fail(error: FileError) {
    alert("Failed to list directory contents: " + error.code);
}

document.addEventListener("app.Ready", onAppReady, false) ;


// EncodingError 
// "A URI supplied to the API was malformed, or the resulting Data URL has exceeded the URL length limitations for Data URLs."
// document.addEventListener("deviceready", onAppReady, false) ;
// document.addEventListener("onload", onAppReady, false) ;

// The app.Ready event shown above is generated by the init-dev.js file; it
// unifies a variety of common "ready" events. See the init-dev.js file for
// more details. You can use a different event to start your app, instead of
// this event. A few examples are shown in the sample code above. If you are
// using Cordova plugins you need to either use this app.Ready event or the
// standard Crordova deviceready event. Others will either not work or will
// work poorly.

// NOTE: change "dev.LOG" in "init-dev.js" to "true" to enable some console.log
// messages that can help you debug Cordova app initialization issues.
